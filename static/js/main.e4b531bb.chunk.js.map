{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","classname","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callAPi","sent","setState","stop","fetch","then","alpha","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PC4BxC,SAASC,EAATC,GAAqC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAeD,EAA/B,KAoBOE,MAnDf,SAAAC,GAAmD,IAAlCP,EAAkCO,EAAlCP,MAAON,EAA2Ba,EAA3Bb,OAAQc,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACpC,OACIb,EAAAC,EAAAC,cAAA,OAAKG,UAAW,SACZL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVO,EAAOE,IAAI,SAACN,EAAMO,GAAP,OAAiBf,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEhEf,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBACTL,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAeiB,KAAML,EACNM,QAAS,IACTC,SAAW,MACXC,WAAS,EACTC,QAAU,gBCsD9BC,6MAtCbC,MAAQ,KAMRC,cAAgB,WAOd,OANeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAOzB,MAAOwB,EAAME,cACbhC,OAAQ8B,EAAMG,mBAAoBf,IAAKY,EAAMI,GAC7CpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAKlCoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CAAEf,WAFL,wBAAAU,EAAAM,SAAAT,QAKbM,SAAW,WACV,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAK,OAAIA,EAAMC,SACpBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAtBzBG,KAAKpB,8CAyBG,IACAN,EAAW0B,KAAK7B,MAAhBG,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKG,UAAWsB,EAAS,MAAQ,gBAC9BA,EAAS0B,KAAK5B,gBAAkB,kBAhEvB6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.e4b531bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie ({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className =\"Movie\" >\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genre\">\r\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\"> \r\n                    <LinesEllipsis text={synopsis} \r\n                                   maxLine= '3' \r\n                                   ellipsis = '...' \r\n                                   trimRight \r\n                                   basedOn = 'letters' />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster ({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n}   // functional component \r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span classname=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired,\r\n        genres : PropTypes.array.isRequired,\r\n        synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt : PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  // componentWillMount() {}\n    /*\n    setTimeout(() => {\n      this.setState ({\n        movies : [\n          {\n            title : \"Iron Man\",\n            poster : \"https://upload.wikimedia.org/wikipedia/en/7/70/Ironmanposter.JPG\"\n          },\n          {\n            title : \"Thor\",\n            poster : \"https://upload.wikimedia.org/wikipedia/en/f/fc/Thor_poster.jpg\"\n          },\n          {\n            title : \"Spider Man\",\n            poster : \"https://images-na.ssl-images-amazon.com/images/I/71ZKGZ0fWfL._SY606_.jpg\"\n          },\n          {\n            title : \"Doctor Strange\",\n            poster : \"https://images-na.ssl-images-amazon.com/images/I/61yHlaxjkgL.jpg\"\n          },\n          {\n            title : \"Captain America\",\n            poster : \"https://images-na.ssl-images-amazon.com/images/I/71krfsS5kNL._SY679_.jpg\"\n          }\n        ]\n      })\n    }, 5000)\n  */\n\n  state = {}\n\n  componentDidMount () {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie title={movie.title_english}\n                    poster={movie.medium_cover_image} key={movie.id}\n                    genres={movie.genres} \n                    synopsis={movie.synopsis}  />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callAPi()\n    this.setState({ movies })\n  } // async it doesn't have to finish so the next work can start\n\n  _callAPi = () => {\n   return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n   .then(alpha => alpha.json())\n   .then(json => json.data.movies)\n   .catch(err => console.log(err))\n  }\n\n  render () {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\" }>   \n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// render() {} ->  return ()  | props | map | prop-types | life-cycle | state\n\n// lifecycle : (1) componentWillMount() -> (2) render() -> (3) componentDidMount() \n// update : componentWillErceiveProps() -> shouldComponentUpdate() -> componentWillUpdate()\n//          -> render() -> component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}